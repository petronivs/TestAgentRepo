@page "/dynamic-shape"

<PageTitle>Dynamic Shape</PageTitle>

<h1>Dynamic Shape</h1>

<div style="margin-top: 2rem;">
    <div class="mb-3">
        <label for="textInput" class="form-label">Enter text to generate dynamic shapes:</label>
        <input type="text" id="textInput" class="form-control" style="width: 400px;" 
               @bind="inputText" @oninput="OnTextChanged" placeholder="Type some text..." />
    </div>
    
    <div class="shape-container" style="margin-top: 2rem;">
        <svg width="500" height="400" viewBox="0 0 500 400" xmlns="http://www.w3.org/2000/svg">
            @foreach (var line in shapeLines)
            {
                <line x1="@line.X1" y1="@line.Y1" x2="@line.X2" y2="@line.Y2" 
                      stroke="@line.Color" stroke-width="@line.Width" />
            }
        </svg>
    </div>
    
    @if (!string.IsNullOrEmpty(inputText))
    {
        <div class="mt-3">
            <small class="text-muted">
                Generated @shapeLines.Count lines from "@inputText" 
                (Unicode values: @string.Join(", ", inputText.Select(c => ((int)c).ToString())))
            </small>
        </div>
    }
</div>

@code {
    private string inputText = "";
    private List<ShapeLine> shapeLines = new List<ShapeLine>();

    protected override void OnInitialized()
    {
        UpdateShape();
    }

    private void OnTextChanged(ChangeEventArgs e)
    {
        inputText = e.Value?.ToString() ?? "";
        UpdateShape();
    }

    private void UpdateShape()
    {
        shapeLines.Clear();
        
        if (string.IsNullOrEmpty(inputText))
            return;

        double centerX = 250;
        double centerY = 200;
        
        for (int i = 0; i < inputText.Length; i++)
        {
            char c = inputText[i];
            int unicode = (int)c;
            
            // Use unicode value to determine line properties
            double angle = (unicode * 5.7) % 360; // Different multiplier for more variation
            double length = (unicode % 80) + 20; // Line length between 20-99
            double offsetRadius = (unicode % 100) + 10; // Distance from center
            
            // Calculate line position based on character index and unicode
            double baseAngle = (i * 360.0 / inputText.Length) * Math.PI / 180;
            double lineX = centerX + Math.Cos(baseAngle) * offsetRadius;
            double lineY = centerY + Math.Sin(baseAngle) * offsetRadius;
            
            // Calculate line end position
            double lineAngle = angle * Math.PI / 180;
            double endX = lineX + Math.Cos(lineAngle) * length;
            double endY = lineY + Math.Sin(lineAngle) * length;
            
            // Generate color based on unicode value
            string color = GenerateColor(unicode);
            int width = (unicode % 3) + 1; // Line width between 1-3
            
            shapeLines.Add(new ShapeLine
            {
                X1 = lineX,
                Y1 = lineY,
                X2 = endX,
                Y2 = endY,
                Color = color,
                Width = width
            });
        }
    }

    private string GenerateColor(int unicode)
    {
        // Generate color based on unicode value
        int r = (unicode * 7) % 256;
        int g = (unicode * 13) % 256;
        int b = (unicode * 19) % 256;
        
        return $"rgb({r},{g},{b})";
    }

    private class ShapeLine
    {
        public double X1 { get; set; }
        public double Y1 { get; set; }
        public double X2 { get; set; }
        public double Y2 { get; set; }
        public string Color { get; set; } = "";
        public int Width { get; set; }
    }
}