@page "/dynamic-shape-2"
@using DynamicShapeLogic

<PageTitle>Dynamic Shape 2</PageTitle>

<h1>Dynamic Shape 2</h1>

<div style="margin-top: 2rem;">
    <div class="mb-3">
        <label for="textInput" class="form-label">Enter text to generate dynamic shapes:</label>
        <input type="text" id="textInput" class="form-control" style="width: 400px;" 
               @bind="inputText" @oninput="OnTextChanged" placeholder="Type some text..." />
    </div>
    
    <div class="shape-container" style="margin-top: 2rem;">
        <svg width="500" height="400" viewBox="0 0 500 400" xmlns="http://www.w3.org/2000/svg">
            @foreach (var line in shapeLines)
            {
                <line x1="@line.X1" y1="@line.Y1" x2="@line.X2" y2="@line.Y2" 
                      stroke="@line.Color" stroke-width="@line.Width" />
            }
        </svg>
    </div>
    
    @if (!string.IsNullOrEmpty(inputText))
    {
        <div class="mt-3">
            <small class="text-muted">
                Generated @shapeLines.Count lines from "@inputText" 
                (Unicode values: @string.Join(", ", inputText.Select(c => ((int)c).ToString())))
            </small>
        </div>
    }
</div>

@code {
    private string inputText = "";
    private List<ShapeLine> shapeLines = new List<ShapeLine>();
    private readonly DynamicShapeGenerator shapeGenerator = new DynamicShapeGenerator();

    protected override void OnInitialized()
    {
        UpdateShape();
    }

    private void OnTextChanged(ChangeEventArgs e)
    {
        inputText = e.Value?.ToString() ?? "";
        UpdateShape();
    }

    private void UpdateShape()
    {
        shapeLines = shapeGenerator.GenerateShape(inputText);
    }
}